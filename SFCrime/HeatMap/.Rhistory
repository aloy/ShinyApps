bivn <- mvrnorm(1000, mu = c(0, 0), Sigma = matrix(c(1, rho, rho, 1), 2))
bivn.kde <- kde2d(bivn[,1], bivn[,2], n = 50)
persp(bivn.kde, phi = 45, theta = 30, shade = .1, border = NA)
rho = 0.5
bivn <- mvrnorm(1000, mu = c(0, 0), Sigma = matrix(c(1, rho, rho, 1), 2))
bivn.kde <- kde2d(bivn[,1], bivn[,2], n = 50)
persp(bivn.kde, phi = 45, theta = 30, shade = .1, border = NA)
bivn <- mvrnorm(5000, mu = c(0, 0), Sigma = matrix(c(1, rho, rho, 1), 2))
bivn.kde <- kde2d(bivn[,1], bivn[,2], n = 50)
persp(bivn.kde, phi = 45, theta = 30, shade = .1, border = NA)
?kde2d
bivn.kde <- kde2d(bivn[,1], bivn[,2], h = 2, n = 50)
persp(bivn.kde, phi = 45, theta = 30, shade = .1, border = NA)
persp(bivn.kde, phi = 45, theta = 30, border = NA)
persp(bivn.kde, phi = 45, theta = 30)
rho = 0.5
bivn <- mvrnorm(5000, mu = c(0, 0), Sigma = matrix(c(1, rho, rho, 1), 2))
bivn.kde <- kde2d(bivn[,1], bivn[,2], h =2, n = 50)
persp(bivn.kde, phi = 45, theta = 30)
persp(bivn.kde, phi = 45, theta = 30,xlab='x1',ylab='x2')
persp(bivn.kde, phi = 45, theta = 30,xlab='x1',ylab='x2',zlab='f(x1,x2)')
persp(bivn.kde, phi = 30, theta = 30,xlab='x1',ylab='x2',zlab='f(x1,x2)')
persp(bivn.kde, phi = 30, theta = 30,xlab='x1',ylab='x2',zlab='f(x1,x2)',main = expression(rho[12] = 0.5))
expression(rho[12] = 0.5)
persp(bivn.kde, phi = 30, theta = 30,xlab='x1',ylab='x2',zlab='f(x1,x2)',main = expression(rho[12] == 0.5))
rho = 0.7
bivn <- mvrnorm(5000, mu = c(0, 0), Sigma = matrix(c(1, rho, rho, 1), 2))
bivn.kde <- kde2d(bivn[,1], bivn[,2], h =2, n = 50)
persp(bivn.kde, phi = 30, theta = 30,xlab='x1',ylab='x2',zlab='f(x1,x2)',main = expression(rho[12] == 0.7))
rho = 0
bivn <- mvrnorm(5000, mu = c(0, 0), Sigma = matrix(c(1, rho, rho, 1), 2))
bivn.kde <- kde2d(bivn[,1], bivn[,2], h =2, n = 50)
persp(bivn.kde, phi = 30, theta = 30,xlab='x1',ylab='x2',zlab='f(x1,x2)',main = expression(rho[12] == 0))
rho = 0.8
bivn <- mvrnorm(5000, mu = c(0, 0), Sigma = matrix(c(1, rho, rho, 1), 2))
bivn.kde <- kde2d(bivn[,1], bivn[,2], h =2, n = 50)
persp(bivn.kde, phi = 30, theta = 30,xlab='x1',ylab='x2',zlab='f(x1,x2)',main = expression(rho[12] == 0.8))
contour(bivn.kde, phi = 30, theta = 30,xlab='x1',ylab='x2',zlab='f(x1,x2)',main = expression(rho[12] == 0))
contour(bivn.kde,xlab='x1',ylab='x2',main = expression(rho[12] == 0))
contour(bivn.kde,xlab='x1',ylab='x2',main = expression(rho[12] == 0.8))
rho = 0
bivn <- mvrnorm(5000, mu = c(0, 0), Sigma = matrix(c(1, rho, rho, 1), 2))
bivn.kde <- kde2d(bivn[,1], bivn[,2], h =2, n = 50)
contour(bivn.kde,xlab='x1',ylab='x2',main = expression(rho[12] == 0))
require(plotrix)
matrix(c(1,.5,.5,1),2)
ellipse(c(0,0),matrix(c(1,.5,.5,1),2),2)
require(cars)
install.packages('cars')
ellipse(c(0,0),matrix(c(1,.5,.5,1),2),2)
require(cars)
url("http://www.greatcirclemapper.net/en/great-circle-mapper.html?route=KATL-ZBAA&aircraft=617&speed=")
doc.html = htmlTreeParse("http://www.greatcirclemapper.net/en/great-circle-mapper.html?route=KATL-ZBAA&aircraft=617&speed=")
doc.text = unlist(xpathApply(doc.html, '//td', xmlValue))
library(XML)
doc.html = htmlTreeParse("http://www.greatcirclemapper.net/en/great-circle-mapper.html?route=KATL-ZBAA&aircraft=617&speed=")
doc.text = unlist(xpathApply(doc.html, '//td', xmlValue))
doc.html
doc.text = unlist(xpathApply(doc.html, '//table', xmlValue))
install.packages('rvest')
library(rvest)
library(rvest)
url <- "http://www.greatcirclemapper.net/en/great-circle-mapper.html?route=KATL-ZBAA&aircraft=617&speed=")
distance <- url %>%
html() %>%
html_nodes(xpath='//*[@id="panel"]/div[2]/div[1]/div[2]/table/tbody/tr[2]/td[1]') %>%
html_table()
url <- "http://www.greatcirclemapper.net/en/great-circle-mapper.html?route=KATL-ZBAA&aircraft=617&speed=")
distance <- url %>%
html() %>%
html_nodes(xpath='//*[@id="panel"]/div[2]/div[1]/div[2]/table/tbody/tr[2]/td[1]')
distance <- url %>%
html() %>%
html_nodes(xpath='//*[@id="panel"]/div[2]/div[1]/div[2]/table') %>%
html_table()
url %>%
html()
url
urls <- "http://www.greatcirclemapper.net/en/great-circle-mapper.html?route=KATL-ZBAA&aircraft=617&speed=")
distance <- urls %>%
html() %>%
html_nodes(xpath='//*[@id="panel"]/div[2]/div[1]/div[2]/table') %>%
html_table()
urls <- "http://www.greatcirclemapper.net/en/great-circle-mapper.html?route=KATL-ZBAA&aircraft=617&speed="
distance <- urls %>%
html() %>%
html_nodes(xpath='//*[@id="panel"]/div[2]/div[1]/div[2]/table') %>%
html_table()
distance
distance <- urls %>%
html() %>%
html_nodes(xpath='//*[@id="panel"]/div[2]/div[1]/div[2]/table/tbody/tr[2]/td[1]')
distance
distance <- urls %>%
html() %>%
html_nodes(xpath='//*[@id="panel"]/div[2]/div[1]/div[2]/table/tbody/tr[2]/td[1]') %>%
html_table()
distance
distance[[1]]
length(distance)
distance <- urls %>%
html() %>%
html_nodes(xpath='//*[@id="panel"]/div[2]/div[1]/div[2]/table') %>%
html_table()
distance
length(distance)
urls <- "http://www.greatcirclemapper.net/en/great-circle-mapper.html?route=KATL-ZBAA&aircraft=617&speed="
distance <- urls %>%
html() %>%
html_nodes(xpath='//*[@id="panel"]/div[2]/div[1]/div[2]/table/tbody/tr[2]/td[1]') %>%
html_text()
distance
urls <- "http://www.greatcirclemapper.net/en/great-circle-mapper.html?route=KATL-ZBAA&aircraft=617&speed="
distance <- urls %>%
html() %>%
html_nodes(xpath='div table td') %>%
html_text()
distance <- urls %>%
html() %>%
html_nodes(xpath='div table tr td') %>%
html_text()
distance <- urls %>%
html() %>%
html_nodes('div table tr td') %>%
html_text()
distance
distance <- urls %>%
html() %>%
html_nodes('div table tr td') %>%
html_text()[1]
distance[1]
strsplit(distance[1],',')
strsplit(strsplit(distance[1],',')[[1]][2],' ')
strsplit(distance[1],',')[[1]][2]
strsplit(strsplit(distance[1],',')[[1]][2],' km')
as.numeric(strsplit(strsplit(distance[1],',')[[1]][2],' km')[[1]])
urls <- 'https://www.world-airport-codes.com/search/?apt=pek'
distance <- urls %>%
html() %>%
html_nodes('div table tr td') %>%
html_text()
distance
read.table(header=FALSE, text='ATL	PEK	LHR	HND	ORD	LAX	CDG	DFW	CGK	DXB	FRA	HKG	DEN	BKK	SIN	AMS	JFK	CAN	MAD	IST	PVG	SFO	CLT	LAS	PHX	IAH	KUL	MIA	ICN	MUC')
dat <- read.table(header=FALSE, text='ATL	PEK	LHR	HND	ORD	LAX	CDG	DFW	CGK	DXB	FRA	HKG	DEN	BKK	SIN	AMS	JFK	CAN	MAD	IST	PVG	SFO	CLT	LAS	PHX	IAH	KUL	MIA	ICN	MUC')
dat[1,]
tolower(dat[1,])
tolower(as.character(dat[1,]))
as.character(dat[1,])
?read.table
dat <- read.table(header=FALSE, text='ATL	PEK	LHR	HND	ORD	LAX	CDG	DFW	CGK	DXB	FRA	HKG	DEN	BKK	SIN	AMS	JFK	CAN	MAD	IST	PVG	SFO	CLT	LAS	PHX	IAH	KUL	MIA	ICN	MUC')
class(dat)
class(dat[,1])
as.character(dat[,1])
apply(dat,1,as.character)
nms <- apply(dat,1,as.character)
nms <- tolower(apply(dat,1,as.character))
nms
nms <- tolower(apply(dat,1,as.character))
urls <- paste('https://www.world-airport-codes.com/search/?apt=',nms[1],sep='')
codes <- urls %>%
html() %>%
html_nodes('div table tr td') %>%
html_text()
codes[2]
nms <- tolower(apply(dat,1,as.character))
cds <- rep(0,length(nms))
library(rvest)
for(i in 1:length(nms)){
urls <- paste('https://www.world-airport-codes.com/search/?apt=',nms[i],sep='')
codes <- urls %>%
html() %>%
html_nodes('div table tr td') %>%
html_text()
cds[i] <- codes[2]
}
cds
i=1
j=2
urls <- paste("http://www.greatcirclemapper.net/en/great-circle-mapper.html?route=",cds[i],'-',cds[j],"&aircraft=617&speed=",sep='')
urls
distance <- urls %>%
html() %>%
html_nodes('div table tr td') %>%
html_text()
as.numeric(strsplit(strsplit(distance[1],',')[[1]][2],' km')[[1]])
D <-matrix(0,nrow=length(nms),ncol=length(nms))
D <-matrix(0,nrow=length(nms),ncol=length(nms))
for(i in 1:length(nms)){
for(j in (i+1):length(nms)){
urls <- paste("http://www.greatcirclemapper.net/en/great-circle-mapper.html?route=",cds[i],'-',cds[j],"&aircraft=617&speed=",sep='')
distance <- urls %>%
html() %>%
html_nodes('div table tr td') %>%
html_text()
D[i,j] <- as.numeric(strsplit(strsplit(distance[1],',')[[1]][2],' km')[[1]])
}}
i
j
D
D
upper.tri(D)
t(D)[lower.tri(D)]
as.dist(D)
as.dist(t(D))
D <-matrix(0,nrow=length(nms),ncol=length(nms))
for(i in 1:length(nms)){
for(j in (i+1):length(nms)){
urls <- paste("http://www.greatcirclemapper.net/en/great-circle-mapper.html?route=",cds[i],'-',cds[j],"&aircraft=617&speed=",sep='')
distance <- urls %>%
html() %>%
html_nodes('div table tr td') %>%
html_text()
D[i,j] <- as.numeric(strsplit(strsplit(distance[1],',')[[1]][2],' km')[[1]])
}}
dt <- as.dist(t(D))
save(dt,file='AirDistances.RData')
dt
i
j
cmdscale(dt)
plot(cmdscale(dt))
text(cmdscale(dt),nms)
plot(cmdscale(dt)[,c(2,1)])
text(cmdscale(dt)[,c(2,1)],nms)
plot(loc[,1],loc[,2])
loc <- cmdscale(dt)
plot(loc[,1],loc[,2])
text(loc[,1],loc[,2],nms)
plot(-loc[,1],loc[,2])
text(-loc[,1],loc[,2],nms)
plot(-loc[,1],loc[,2],type='n')
text(-loc[,1],loc[,2],nms)
text(-loc[,1],loc[,2],nms,cex = .6)
plot(-loc[,1],loc[,2],type='n')
text(-loc[,1],loc[,2],nms,cex = .6)
plot(-loc[,1],-loc[,2],type='n')
text(-loc[,1],-loc[,2],nms,cex = .6)
mst(dt)
require(ape)
mst(dt)
lines(mst(dt))
plot(mst(dt),add=TRUE)
mst(dt)
plot(mst(dt))
plot(mst(dt),-loc[,1],-loc[,2])
plot(mst(dt),x1=-loc[,1],x2=-loc[,2])
row.names(dt)
row.names(dt) <- nms
?dist
row.names(D)
row.names(D) <- nms
column.names(D) <- nms
as.dist(t(D))
dt <- as.dist(t(D))
save(dt,file='AirDistances.RData')
plot(mst(dt),x1=-loc[,1],x2=-loc[,2])
loc <- cmdscale(dt)
plot(mst(dt),x1=-loc[,1],x2=-loc[,2])
mst(dt)
plot(mst(dt),x1=-loc[,1],x2=-loc[,2])
?plot.mst
plot(mst(dt),x1=-loc[,1],x2=-loc[,2])
plot(mst(dt),x1=-loc[,1],x2=-loc[,2],cex=.6)
plot(mst(dt),x1=-loc[,1],x2=-loc[,2],cex=.6)
x = -loc[,1]; y = -loc[,2]
plot(x,y,type='n')
text(x,y,nms,cex = .6)
require(ape)
st <- mst(dt)
for(i in 1:nrow(st)){
w1 <- which(st[i,] == 1)
segments(x[i],y[i],x[w1],y[w1])
}
plot(cmdscale(dist(wine)),col = wine$Class,pch=19)
wine.fl <- "http://archive.ics.uci.edu/ml/machine-learning-databases/wine/wine.data"
wine <- read.csv(wine.fl,header = F)
names(wine)=c('Class',"Alcohol", "Malic acid", "Ash", "Alcalinity of ash", "Magnesium",
"Total phenols", "Flavanoids", "Nonflavanoid phenols", "Proanthocyanins",
"Color intensity", "Hue", "OD280/OD315 of diluted wines", "Proline")
plot(cmdscale(dist(wine)),col = wine$Class,pch=19)
scale(wine)
plot(cmdscale(dist(scale(wine))),col = wine$Class,pch=19)
plot(cmdscale(dist(wine)),col = wine$Class,pch=19) #without standardizing
plot(cmdscale(dist(scale(wine))),col = wine$Class,pch=19) #with standardizing
st <- mst(Dsc)
for(i in 1:nrow(st)){
w1 <- which(st[i,] == 1)
segments(x[i],y[i],x[w1],y[w1])
}
Dsc = cmdscale(dist(scale(wine)))
st <- mst(Dsc)
for(i in 1:nrow(st)){
w1 <- which(st[i,] == 1)
segments(x[i],y[i],x[w1],y[w1])
}
locS = cmdscale(dist(scale(wine)))
x = locS[,1]; y = locS[,2]
plot(x,y,col = wine$Class,pch=19) #with standardizing
require(ape)
st <- mst(dist(scale(wine)))
for(i in 1:nrow(st)){
w1 <- which(st[i,] == 1)
segments(x[i],y[i],x[w1],y[w1])
}
shiny::runApp('Desktop/SFCrime/renotesonmixturemodel')
shiny::runApp('Desktop/SFCrime/renotesonmixturemodel')
shiny::runApp('Desktop/SFCrime/renotesonmixturemodel')
df_neigh_tmp <- df_neigh
df.sf_crime <- read.csv("../SFPD.csv")
setwd("~/Desktop/SFCrime/renotesonmixturemodel")
library(rgdal)
df.sf_crime <- read.csv("../SFPD.csv")
source("helper.R")
df.sf_crime$Times <- sapply(strsplit(as.character(df.sf_crime$Time),":"),function(v) { as.numeric(v[1])  + as.numeric(v[2])/60})
df.sf_crime$Dates <- as.Date(df.sf_crime$Date,format="%m/%d/%Y")
df_neigh <- spTransform(readOGR("..",'planning_neighborhoods') ,CRS("+proj=longlat +ellps=WGS84"))
df_water <- spTransform(readOGR("..",'phys_waterbodies') ,CRS("+proj=longlat +ellps=WGS84"))
df_neigh_tmp <- df_neigh
sp <- SpatialPoints(subdat[,c('X','Y')],CRS("+proj=longlat +ellps=WGS84"))
spdf <- SpatialPointsDataFrame(sp,subdat)
subdat=df.sf_crime
df_neigh_tmp <- df_neigh
sp <- SpatialPoints(subdat[,c('X','Y')],CRS("+proj=longlat +ellps=WGS84"))
spdf <- SpatialPointsDataFrame(sp,subdat)
level.plot(kde.points(spdf))
plot(kde.points(spdf))
kde.points(spdf)
install.packages('GISTools')
require(GISTools)
plot(kde.points(spdf))
kde.points(spdf)
spdf
level.plot(kde.points(spdf,h=.1))
level.plot(kde.points(spdf,h=.01))
plot(df_neigh,add=TRUE)
plot(df_water,add=TRUE,col='lightblue')
level.plot(kde.points(spdf,h=.05))
plot(df_neigh,add=TRUE)
plot(df_water,add=TRUE,col='lightblue')
masker = poly.outer(spdf,df_neigh,extend=100)
level.plot
n = 10
pal <- colorRampPalette(c('white','DarkBlue'))(n+1)[2:(n+1)]
level.plot(kde.points(spdf,h=.02),shades=)
plot(df_neigh,add=TRUE)
plot(df_water,add=TRUE,col='lightblue')
level.plot(kde.points(spdf,h=.02),shades=pal)
auto.shading
knl <- kde.points(spdf,h=.02)
knl
data.frame(knl)
summary(data.frame(knl)[,1])
auto.shading
pal <- auto.shading(data.frame(knl)[,1],n=10,cols = brewer.pal(n,'Blues'))
pal <- auto.shading(data.frame(knl)[,1],n=9,cols = brewer.pal(n,'Blues'))
pal <- auto.shading(data.frame(knl)[,1],n=9,cols = brewer.pal(9,'Blues'))
level.plot(knl,shades=pal)
plot(df_neigh,add=TRUE)
plot(df_water,add=TRUE,col='lightblue')
?kde.points
knl <- kde.points(spdf,h=.02,n=100)
pal <- auto.shading(data.frame(knl)[,1],n=9,cols = brewer.pal(9,'Blues'))
level.plot(knl,shades=pal)
plot(df_neigh,add=TRUE)
plot(df_water,add=TRUE,col='lightblue')
knl <- kde.points(spdf,h=.01,n=100)
pal <- auto.shading(data.frame(knl)[,1],n=9,cols = brewer.pal(9,'Blues'))
level.plot(knl,shades=pal)
plot(df_neigh,add=TRUE)
plot(df_water,add=TRUE,col='lightblue')
knl <- kde.points(spdf,h=.005,n=100)
pal <- auto.shading(data.frame(knl)[,1],n=9,cols = brewer.pal(9,'Blues'))
level.plot(knl,shades=pal)
plot(df_neigh,add=TRUE)
plot(df_water,add=TRUE,col='lightblue')
sp
?kde.points
level.plot(knl,shades=pal,lims = df_neigh)
knl <- kde.points(spdf,h=.005,n=100,lims = df_neigh)
pal <- auto.shading(data.frame(knl)[,1],n=9,cols = brewer.pal(9,'Blues'))
level.plot(knl,shades=pal)
plot(df_neigh,add=TRUE)
plot(df_neigh)
?auto.shading
?rangeCuts
pal <- auto.shading(data.frame(knl)[,1],n=9,cols = brewer.pal(9,'Blues'),cutter=rangeCuts)
level.plot(knl,shades=pal)
plot(df_neigh,add=TRUE)
plot(df_water,add=TRUE,col='lightblue')
rangeCuts
auto.shading
rangeCuts
pal <- auto.shading(data.frame(knl)[,1],n=9,cols = brewer.pal(9,'Blues'),cutter=sdCuts)
level.plot(knl,shades=pal)
pal <- auto.shading(data.frame(knl)[,1],n=9,cols = brewer.pal(9,'Blues'),cutter=quantileCuts)
level.plot(knl,shades=pal)
knl <- kde.points(spdf,h=.005,n=5,lims = df_neigh)
knl <- kde.points(spdf,h=.005,n=50,lims = df_neigh)
pal <- auto.shading(data.frame(knl)[,1],n=9,cols = brewer.pal(9,'Blues'),cutter=quantileCuts)
level.plot(knl,shades=pal)
level.plot(knl,shades=pal)
plot(df_neigh,add=TRUE)
plot(df_water,add=TRUE,col='lightblue')
knl <- kde.points(spdf,h=.001,n=50,lims = df_neigh)
pal <- auto.shading(data.frame(knl)[,1],n=9,cols = brewer.pal(9,'Blues'),cutter=quantileCuts)
level.plot(knl,shades=pal)
knl <- kde.points(spdf,h=.002,n=50,lims = df_neigh)
pal <- auto.shading(data.frame(knl)[,1],n=9,cols = brewer.pal(9,'Blues'),cutter=quantileCuts)
level.plot(knl,shades=pal)
knl <- kde.points(spdf,h=.003,n=50,lims = df_neigh)
pal <- auto.shading(data.frame(knl)[,1],n=9,cols = brewer.pal(9,'Blues'),cutter=quantileCuts)
level.plot(knl,shades=pal)
plot(df_neigh,add=TRUE)
plot(df_water,add=TRUE,col='lightblue')
shiny::runApp()
shiny::runApp()
topct <- tail(row.names(sort(table(df.sf_crime$Category))),20)
topct
table(df.sf_crime$Category)
sort(table(df.sf_crime$Category))
shiny::runApp()
shiny::runApp()
levels(df.sf_crime$Category)
df.sf_crime$Category = factor(df.sf_crime$Category)
levels(df.sf_crime$Category)
df.sf_crime = df.sf_crime[df.sf_crime$Category %in%  topct,]
df.sf_crime$Category = factor(df.sf_crime$Category)
df.sf_crime = df.sf_crime[df.sf_crime$Category %in%  topct,]
levels(df.sf_crime$Category)
paste("list(",paste(paste("'",levels(df.sf_crime$Category),"' = '",levels(df.sf_crime$Category),"'",sep=''),collapse=','), ")",sep='')
paste("list(",paste(paste("'",tolower(levels(df.sf_crime$Category)),"' = '",levels(df.sf_crime$Category),"'",sep=''),collapse=','), ")",sep='')
paste("list('All Crimes = ALL CRIMES",paste(paste("'",tolower(levels(df.sf_crime$Category)),"' = '",levels(df.sf_crime$Category),"'",sep=''),collapse=','), ")",sep='')
paste("list('All Crimes = ALL CRIMES',",paste(paste("'",tolower(levels(df.sf_crime$Category)),"' = '",levels(df.sf_crime$Category),"'",sep=''),collapse=','), ")",sep='')
shiny::runApp()
paste("list('All Crimes = ALL CRIMES',",paste(paste("'",tolower(levels(df.sf_crime$Category)),"' = '",levels(df.sf_crime$Category),"'",sep=''),collapse=','), ")",sep='')
shiny::runApp()
shiny::runApp()
paste("list('All Crimes = CRIMES',",paste(paste("'",levels(df.sf_crime$Category),"' = '",levels(df.sf_crime$Category),"'",sep=''),collapse=','), ")",sep='')
shiny::runApp()
shiny::runApp()
shiny::runApp()
?auto.shading
hist(data.frame(knl)[,1])
boxplot(data.frame(knl)[,1])
summary(data.frame(knl)[,1])
brewer.pal(9,'Blues')
pal <- list(breaks = c(0,1,5,25,50,100,250, 500, 1000,1500,2500),cols = c('FFFFFF',brewer.pal(9,'Blues')))
level.plot(knl,shades=pal)
brewer.pal(9,'Blues')
pal <- list(breaks = c(0,1,5,25,50,100,250, 500, 1000,1500,2500),cols = c('#FFFFFF',brewer.pal(9,'Blues')))
level.plot(knl,shades=pal)
knl <- kde.points(spdf,h=.01,n=50,lims = df_neigh)
pal <- list(breaks = c(0,1,5,25,50,100,250, 500, 1000,1500,2500),cols = c('#FFFFFF',brewer.pal(9,'Blues')))
level.plot(knl,shades=pal)
knl
pal <- list(breaks = c(0,1,5,25,50,100,2500),cols = c('#FFFFFF',brewer.pal(5,'Blues')))
level.plot(knl,shades=pal)
filled.contour
pal <- list(breaks = c(0,1,100,2500),cols = c('#FFFFFF',brewer.pal(2,'Blues')))
level.plot(knl,shades=pal)
pal <- list(breaks = c(0,1,100,2500),cols = c('#FFFFFF',brewer.pal(3,'Blues')))
level.plot(knl,shades=pal)
knl <- kde.points(spdf,h=.01,n=50,lims = df_neigh)
pal <- list(breaks = c(0,1,100,2500),cols = c('#FFFFFF',brewer.pal(3,'Blues')))
level.plot(knl,shades=pal)
plot(knl)
knl <- kde.points(spdf,h=.1,n=50,lims = df_neigh)
pal <- list(breaks = c(0,1,100,2500),cols = c('#FFFFFF',brewer.pal(3,'Blues')))
level.plot(knl,shades=pal)
pal <- list(breaks = c(0,10,50,100,2500),cols = c('#FFFFFF',brewer.pal(4,'Blues')))
level.plot(knl,shades=pal)
?level.plot
level.plot
pal <- list(breaks = c(10,50,100),cols = c('#FFFFFF',brewer.pal(4,'Blues')))
level.plot(knl,shades=pal)
plot(df_neigh,add=TRUE)
plot(df_water,add=TRUE,col='lightblue')
knl <- kde.points(spdf,h=.01,n=50,lims = df_neigh)
pal <- list(breaks = c(10,50,100),cols = c('#FFFFFF',brewer.pal(4,'Blues')))
level.plot(knl,shades=pal)
plot(df_neigh,add=TRUE)
plot(df_water,add=TRUE,col='lightblue')
pal <- list(breaks = c(10,50,100,500),cols = c('#FFFFFF',brewer.pal(4,'Blues')))
level.plot(knl,shades=pal)
log(1)
log(2)
log(10)
log(1)+1
log(1)+1+1
5^1
pal <- list(breaks = c(10,50,100,500,1000),cols = c('#FFFFFF',brewer.pal(4,'Blues')))
level.plot(knl,shades=pal)
pal <- list(breaks = c(10,50,100,500,1000),cols = c('#FFFFFF',brewer.pal(5,'Blues')))
level.plot(knl,shades=pal)
pal <- list(breaks = c(10,50,100,500,1000),cols = c('#FFFFFF',brewer.pal(5,'Reds')))
level.plot(knl,shades=pal)
pal <- list(breaks = c(2,10,50,100,500,1000),cols = c('#FFFFFF',brewer.pal(5,'Reds')))
level.plot(knl,shades=pal)
pal <- list(breaks = c(2,10,50,100,500,1000),cols = c('#FFFFFF',brewer.pal(6,'Reds')))
level.plot(knl,shades=pal)
plot(df_neigh,add=TRUE)
plot(df_water,add=TRUE,col='lightblue')
pal <- list(breaks = c(1,10,50,100,500,1000),cols = c('#FFFFFF',brewer.pal(6,'Reds')))
level.plot(knl,shades=pal)
plot(df_neigh,add=TRUE)
plot(df_water,add=TRUE,col='lightblue')
pal <- list(breaks = c(10,50,100,500,1000),cols = c('#FFFFFF',brewer.pal(6,'Reds')))
level.plot(knl,shades=pal)
plot(df_neigh,add=TRUE)
plot(df_water,add=TRUE,col='lightblue')
shiny::runApp()
shiny::runApp()
