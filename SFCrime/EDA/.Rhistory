bivn.kde <- kde2d(bivn[,1], bivn[,2], h =2, n = 50)
persp(bivn.kde, phi = 30, theta = 30,xlab='x1',ylab='x2',zlab='f(x1,x2)',main = expression(rho[12] == 0.8))
contour(bivn.kde, phi = 30, theta = 30,xlab='x1',ylab='x2',zlab='f(x1,x2)',main = expression(rho[12] == 0))
contour(bivn.kde,xlab='x1',ylab='x2',main = expression(rho[12] == 0))
contour(bivn.kde,xlab='x1',ylab='x2',main = expression(rho[12] == 0.8))
rho = 0
bivn <- mvrnorm(5000, mu = c(0, 0), Sigma = matrix(c(1, rho, rho, 1), 2))
bivn.kde <- kde2d(bivn[,1], bivn[,2], h =2, n = 50)
contour(bivn.kde,xlab='x1',ylab='x2',main = expression(rho[12] == 0))
require(plotrix)
matrix(c(1,.5,.5,1),2)
ellipse(c(0,0),matrix(c(1,.5,.5,1),2),2)
require(cars)
install.packages('cars')
ellipse(c(0,0),matrix(c(1,.5,.5,1),2),2)
require(cars)
url("http://www.greatcirclemapper.net/en/great-circle-mapper.html?route=KATL-ZBAA&aircraft=617&speed=")
doc.html = htmlTreeParse("http://www.greatcirclemapper.net/en/great-circle-mapper.html?route=KATL-ZBAA&aircraft=617&speed=")
doc.text = unlist(xpathApply(doc.html, '//td', xmlValue))
library(XML)
doc.html = htmlTreeParse("http://www.greatcirclemapper.net/en/great-circle-mapper.html?route=KATL-ZBAA&aircraft=617&speed=")
doc.text = unlist(xpathApply(doc.html, '//td', xmlValue))
doc.html
doc.text = unlist(xpathApply(doc.html, '//table', xmlValue))
install.packages('rvest')
library(rvest)
library(rvest)
url <- "http://www.greatcirclemapper.net/en/great-circle-mapper.html?route=KATL-ZBAA&aircraft=617&speed=")
distance <- url %>%
html() %>%
html_nodes(xpath='//*[@id="panel"]/div[2]/div[1]/div[2]/table/tbody/tr[2]/td[1]') %>%
html_table()
url <- "http://www.greatcirclemapper.net/en/great-circle-mapper.html?route=KATL-ZBAA&aircraft=617&speed=")
distance <- url %>%
html() %>%
html_nodes(xpath='//*[@id="panel"]/div[2]/div[1]/div[2]/table/tbody/tr[2]/td[1]')
distance <- url %>%
html() %>%
html_nodes(xpath='//*[@id="panel"]/div[2]/div[1]/div[2]/table') %>%
html_table()
url %>%
html()
url
urls <- "http://www.greatcirclemapper.net/en/great-circle-mapper.html?route=KATL-ZBAA&aircraft=617&speed=")
distance <- urls %>%
html() %>%
html_nodes(xpath='//*[@id="panel"]/div[2]/div[1]/div[2]/table') %>%
html_table()
urls <- "http://www.greatcirclemapper.net/en/great-circle-mapper.html?route=KATL-ZBAA&aircraft=617&speed="
distance <- urls %>%
html() %>%
html_nodes(xpath='//*[@id="panel"]/div[2]/div[1]/div[2]/table') %>%
html_table()
distance
distance <- urls %>%
html() %>%
html_nodes(xpath='//*[@id="panel"]/div[2]/div[1]/div[2]/table/tbody/tr[2]/td[1]')
distance
distance <- urls %>%
html() %>%
html_nodes(xpath='//*[@id="panel"]/div[2]/div[1]/div[2]/table/tbody/tr[2]/td[1]') %>%
html_table()
distance
distance[[1]]
length(distance)
distance <- urls %>%
html() %>%
html_nodes(xpath='//*[@id="panel"]/div[2]/div[1]/div[2]/table') %>%
html_table()
distance
length(distance)
urls <- "http://www.greatcirclemapper.net/en/great-circle-mapper.html?route=KATL-ZBAA&aircraft=617&speed="
distance <- urls %>%
html() %>%
html_nodes(xpath='//*[@id="panel"]/div[2]/div[1]/div[2]/table/tbody/tr[2]/td[1]') %>%
html_text()
distance
urls <- "http://www.greatcirclemapper.net/en/great-circle-mapper.html?route=KATL-ZBAA&aircraft=617&speed="
distance <- urls %>%
html() %>%
html_nodes(xpath='div table td') %>%
html_text()
distance <- urls %>%
html() %>%
html_nodes(xpath='div table tr td') %>%
html_text()
distance <- urls %>%
html() %>%
html_nodes('div table tr td') %>%
html_text()
distance
distance <- urls %>%
html() %>%
html_nodes('div table tr td') %>%
html_text()[1]
distance[1]
strsplit(distance[1],',')
strsplit(strsplit(distance[1],',')[[1]][2],' ')
strsplit(distance[1],',')[[1]][2]
strsplit(strsplit(distance[1],',')[[1]][2],' km')
as.numeric(strsplit(strsplit(distance[1],',')[[1]][2],' km')[[1]])
urls <- 'https://www.world-airport-codes.com/search/?apt=pek'
distance <- urls %>%
html() %>%
html_nodes('div table tr td') %>%
html_text()
distance
read.table(header=FALSE, text='ATL	PEK	LHR	HND	ORD	LAX	CDG	DFW	CGK	DXB	FRA	HKG	DEN	BKK	SIN	AMS	JFK	CAN	MAD	IST	PVG	SFO	CLT	LAS	PHX	IAH	KUL	MIA	ICN	MUC')
dat <- read.table(header=FALSE, text='ATL	PEK	LHR	HND	ORD	LAX	CDG	DFW	CGK	DXB	FRA	HKG	DEN	BKK	SIN	AMS	JFK	CAN	MAD	IST	PVG	SFO	CLT	LAS	PHX	IAH	KUL	MIA	ICN	MUC')
dat[1,]
tolower(dat[1,])
tolower(as.character(dat[1,]))
as.character(dat[1,])
?read.table
dat <- read.table(header=FALSE, text='ATL	PEK	LHR	HND	ORD	LAX	CDG	DFW	CGK	DXB	FRA	HKG	DEN	BKK	SIN	AMS	JFK	CAN	MAD	IST	PVG	SFO	CLT	LAS	PHX	IAH	KUL	MIA	ICN	MUC')
class(dat)
class(dat[,1])
as.character(dat[,1])
apply(dat,1,as.character)
nms <- apply(dat,1,as.character)
nms <- tolower(apply(dat,1,as.character))
nms
nms <- tolower(apply(dat,1,as.character))
urls <- paste('https://www.world-airport-codes.com/search/?apt=',nms[1],sep='')
codes <- urls %>%
html() %>%
html_nodes('div table tr td') %>%
html_text()
codes[2]
nms <- tolower(apply(dat,1,as.character))
cds <- rep(0,length(nms))
library(rvest)
for(i in 1:length(nms)){
urls <- paste('https://www.world-airport-codes.com/search/?apt=',nms[i],sep='')
codes <- urls %>%
html() %>%
html_nodes('div table tr td') %>%
html_text()
cds[i] <- codes[2]
}
cds
i=1
j=2
urls <- paste("http://www.greatcirclemapper.net/en/great-circle-mapper.html?route=",cds[i],'-',cds[j],"&aircraft=617&speed=",sep='')
urls
distance <- urls %>%
html() %>%
html_nodes('div table tr td') %>%
html_text()
as.numeric(strsplit(strsplit(distance[1],',')[[1]][2],' km')[[1]])
D <-matrix(0,nrow=length(nms),ncol=length(nms))
D <-matrix(0,nrow=length(nms),ncol=length(nms))
for(i in 1:length(nms)){
for(j in (i+1):length(nms)){
urls <- paste("http://www.greatcirclemapper.net/en/great-circle-mapper.html?route=",cds[i],'-',cds[j],"&aircraft=617&speed=",sep='')
distance <- urls %>%
html() %>%
html_nodes('div table tr td') %>%
html_text()
D[i,j] <- as.numeric(strsplit(strsplit(distance[1],',')[[1]][2],' km')[[1]])
}}
i
j
D
D
upper.tri(D)
t(D)[lower.tri(D)]
as.dist(D)
as.dist(t(D))
D <-matrix(0,nrow=length(nms),ncol=length(nms))
for(i in 1:length(nms)){
for(j in (i+1):length(nms)){
urls <- paste("http://www.greatcirclemapper.net/en/great-circle-mapper.html?route=",cds[i],'-',cds[j],"&aircraft=617&speed=",sep='')
distance <- urls %>%
html() %>%
html_nodes('div table tr td') %>%
html_text()
D[i,j] <- as.numeric(strsplit(strsplit(distance[1],',')[[1]][2],' km')[[1]])
}}
dt <- as.dist(t(D))
save(dt,file='AirDistances.RData')
dt
i
j
cmdscale(dt)
plot(cmdscale(dt))
text(cmdscale(dt),nms)
plot(cmdscale(dt)[,c(2,1)])
text(cmdscale(dt)[,c(2,1)],nms)
plot(loc[,1],loc[,2])
loc <- cmdscale(dt)
plot(loc[,1],loc[,2])
text(loc[,1],loc[,2],nms)
plot(-loc[,1],loc[,2])
text(-loc[,1],loc[,2],nms)
plot(-loc[,1],loc[,2],type='n')
text(-loc[,1],loc[,2],nms)
text(-loc[,1],loc[,2],nms,cex = .6)
plot(-loc[,1],loc[,2],type='n')
text(-loc[,1],loc[,2],nms,cex = .6)
plot(-loc[,1],-loc[,2],type='n')
text(-loc[,1],-loc[,2],nms,cex = .6)
mst(dt)
require(ape)
mst(dt)
lines(mst(dt))
plot(mst(dt),add=TRUE)
mst(dt)
plot(mst(dt))
plot(mst(dt),-loc[,1],-loc[,2])
plot(mst(dt),x1=-loc[,1],x2=-loc[,2])
row.names(dt)
row.names(dt) <- nms
?dist
row.names(D)
row.names(D) <- nms
column.names(D) <- nms
as.dist(t(D))
dt <- as.dist(t(D))
save(dt,file='AirDistances.RData')
plot(mst(dt),x1=-loc[,1],x2=-loc[,2])
loc <- cmdscale(dt)
plot(mst(dt),x1=-loc[,1],x2=-loc[,2])
mst(dt)
plot(mst(dt),x1=-loc[,1],x2=-loc[,2])
?plot.mst
plot(mst(dt),x1=-loc[,1],x2=-loc[,2])
plot(mst(dt),x1=-loc[,1],x2=-loc[,2],cex=.6)
plot(mst(dt),x1=-loc[,1],x2=-loc[,2],cex=.6)
x = -loc[,1]; y = -loc[,2]
plot(x,y,type='n')
text(x,y,nms,cex = .6)
require(ape)
st <- mst(dt)
for(i in 1:nrow(st)){
w1 <- which(st[i,] == 1)
segments(x[i],y[i],x[w1],y[w1])
}
plot(cmdscale(dist(wine)),col = wine$Class,pch=19)
wine.fl <- "http://archive.ics.uci.edu/ml/machine-learning-databases/wine/wine.data"
wine <- read.csv(wine.fl,header = F)
names(wine)=c('Class',"Alcohol", "Malic acid", "Ash", "Alcalinity of ash", "Magnesium",
"Total phenols", "Flavanoids", "Nonflavanoid phenols", "Proanthocyanins",
"Color intensity", "Hue", "OD280/OD315 of diluted wines", "Proline")
plot(cmdscale(dist(wine)),col = wine$Class,pch=19)
scale(wine)
plot(cmdscale(dist(scale(wine))),col = wine$Class,pch=19)
plot(cmdscale(dist(wine)),col = wine$Class,pch=19) #without standardizing
plot(cmdscale(dist(scale(wine))),col = wine$Class,pch=19) #with standardizing
st <- mst(Dsc)
for(i in 1:nrow(st)){
w1 <- which(st[i,] == 1)
segments(x[i],y[i],x[w1],y[w1])
}
Dsc = cmdscale(dist(scale(wine)))
st <- mst(Dsc)
for(i in 1:nrow(st)){
w1 <- which(st[i,] == 1)
segments(x[i],y[i],x[w1],y[w1])
}
locS = cmdscale(dist(scale(wine)))
x = locS[,1]; y = locS[,2]
plot(x,y,col = wine$Class,pch=19) #with standardizing
require(ape)
st <- mst(dist(scale(wine)))
for(i in 1:nrow(st)){
w1 <- which(st[i,] == 1)
segments(x[i],y[i],x[w1],y[w1])
}
shiny::runApp('Desktop/SFCrime/renotesonmixturemodel')
shiny::runApp('Desktop/SFCrime/renotesonmixturemodel')
shiny::runApp('Desktop/SFCrime/renotesonmixturemodel')
shiny::runApp('Desktop/SFCrime/renotesonmixturemodel')
shiny::runApp('Desktop/SFCrime/renotesonmixturemodel')
prcomp(wine)
wine.fl <- "http://archive.ics.uci.edu/ml/machine-learning-databases/wine/wine.data"
wine <- read.csv(wine.fl,header = F)
names(wine)=c('Class',"Alcohol", "Malic acid", "Ash", "Alcalinity of ash", "Magnesium",
"Total phenols", "Flavanoids", "Nonflavanoid phenols", "Proanthocyanins",
"Color intensity", "Hue", "OD280/OD315 of diluted wines", "Proline")
prcomp(wine)
screeplot(pc)
pc  = prcomp(wine)
screeplot(pc)
screeplot(pc,type='lines')
pc
names(pc)
pc$center
pc$x
plot(pc$x[,1],pc$x[,2])
plot(pc$x[,1],pc$x[,2],col = wine$Class)
plot(pc$x[,1],pc$x[,2],col = wine$Class,pch=19)
?prcomp
pc  = prcomp(wine,scale=TRUE)
screeplot(pc,type='lines')
plot(pc$x[,1],pc$x[,2],col = wine$Class,pch=19)
screeplot(pc,type='lines')
plot(pc$x[,1],pc$x[,2],col = wine$Class,pch=19)
pc$sdev
cumsum(pc$sdev^2)
cumsum(pc$sdev^2)/sum(pc$sdev^2)
y = c(1:10,3:13)
id = rep(1:10,2)
x = c(1:10,3:13)
plot(x,y)
y = c(1:10,5:15)
id = rep(1:10,2)
x = c(1:10,3:13)
plot(x,y)
y = c(1:10,5:15)
id = rep(1:10,2)
x = c(1:10,2:12)
plot(x,y)
basex = c(1:10,1:10)
changex = c(rep(0,10),rep(1,10))
lm(y~basex+changex)
y = c(1:10,5:15)
id = rep(1:10,2)
x = c(1:10,2:12)
plot(x,y)
basex = c(1:10,1:10)
changex = c(rep(0,10),rep(1,10))
lm(y~basex+changex)
basex
changex
y
y = c(1:10,5:14)
id = rep(1:10,2)
x = c(1:10,2:11)
plot(x,y)
basex = c(1:10,1:10)
changex = c(rep(0,10),rep(1,10))
lm(y~basex+changex)
x = rnorm(1000)
hist(x)
pnorm(x)
hist(pnorm(x))
x = rnorm(1000)
hist(x)
hist(pnorm(x))
hist(x)
mean(x)
sd(x)
require(MASS)
plot(x)
plot(pnorm(x))
S = matrix(-1/100+.0001,100,100)
diag(S)
diag(S) = 1
S
x = mvrnorm(100,0, S)
x = mvrnorm(100,rep(0,100), S)
plot(x)
plot(x,type='l')
x
?mvrnomr
?mvrnorm
x = mvrnorm(1,mu=rep(0,100),Sigma= S)
x
plot(x)
plot(x,type='l')
x = rnorm(100)
plot(x,type='l')
x = mvrnorm(1,mu=rep(0,100),Sigma= S)
plot(x,type='l')
plot(x,pnorm(x))
dat = data.frame(id=id,b0=b0)
sa = 2
se = 4
m = 1000
n = 2
id = 1:m
b0 = rnorm(m)
dat = data.frame(id=id,b0=b0)
dat2 = dat[rep(1:m,each=n),]
head(dat)
head(dat2)
dat2$er = rnorm(m*n)
dat2$y = dat2$b0+dat2$er
sum((dat2$y - mean(dat2$y))^2)/(n*m * (n*m-1))
sa = 2
se = 4
m = 100
n = 2
v = rep(0,1000)
for(i in 1:1000){
id = 1:m
b0 = rnorm(m)
dat = data.frame(id=id,b0=b0)
dat2 = dat[rep(1:m,each=n),]
dat2$er = rnorm(m*n)
dat2$y = dat2$b0+dat2$er
v[i] = sum((dat2$y - mean(dat2$y))^2)/(n*m * (n*m-1))
}
v
mean(v)
sa = 2
se = 4
m = 100
n = 2
v = rep(0,1000)
for(i in 1:1000){
id = 1:m
b0 = rnorm(m,sd = sa)
dat = data.frame(id=id,b0=b0)
dat2 = dat[rep(1:m,each=n),]
dat2$er = rnorm(m*n,sd = se)
dat2$y = dat2$b0+dat2$er
v[i] = sum((dat2$y - mean(dat2$y))^2)/(n*m * (n*m-1))
}
mean(v)
(sa^2 + se^2)/(2*m)
((2m-2)*sa^2 + (2m-1)*se^2)/(2*m)
((2*m-2)*sa^2 + (2*m-1)*se^2)/(2*m)
((2*m-2)*sa^2 + (2*m-1)*se^2)/(2*m*(2*m-1))
sa = 2
se = 4
m = 10
n = 2
v = rep(0,1000)
for(i in 1:1000){
id = 1:m
b0 = rnorm(m,sd = sa)
dat = data.frame(id=id,b0=b0)
dat2 = dat[rep(1:m,each=n),]
dat2$er = rnorm(m*n,sd = se)
dat2$y = dat2$b0+dat2$er
v[i] = sum((dat2$y - mean(dat2$y))^2)/(n*m * (n*m-1))
}
mean(v)
(sa^2 + se^2)/(2*m)
((2*m-2)*sa^2 + (2*m-1)*se^2)/(2*m*(2*m-1))
sa = 2
se = 4
m = 10
n = 2
v = rep(0,1=5000)
for(i in 1:5000){
id = 1:m
b0 = rnorm(m,sd = sa)
dat = data.frame(id=id,b0=b0)
dat2 = dat[rep(1:m,each=n),]
dat2$er = rnorm(m*n,sd = se)
dat2$y = dat2$b0+dat2$er
v[i] = sum((dat2$y - mean(dat2$y))^2)/(n*m * (n*m-1))
}
mean(v)
(sa^2 + se^2)/(2*m)
((2*m-2)*sa^2 + (2*m-1)*se^2)/(2*m*(2*m-1))
sa = 2
se = 4
m = 10
n = 2
v = rep(0,1=10000)
for(i in 1:10000){
id = 1:m
b0 = rnorm(m,sd = sa)
dat = data.frame(id=id,b0=b0)
dat2 = dat[rep(1:m,each=n),]
dat2$er = rnorm(m*n,sd = se)
dat2$y = dat2$b0+dat2$er
v[i] = sum((dat2$y - mean(dat2$y))^2)/(n*m * (n*m-1))
}
mean(v)
(sa^2 + se^2)/(2*m)
((2*m-2)*sa^2 + (2*m-1)*se^2)/(2*m*(2*m-1))
df.sf_crime <- read.csv("data/SFPD.csv")
setwd("~/Desktop/SFCrime/EDA")
df.sf_crime <- read.csv("data/SFPD.csv")
df.sf_crime <- read.csv("../SFPD.csv")
df.sf_crime$Times <- sapply(strsplit(as.character(df.sf_crime$Time),":"),function(v){ as.numeric(v[1])+as.numeric(v[2])/60 })
df.sf_crime$Month <- factor(month.name[as.numeric(substr(df.sf_crime$Date,1,2))],levels=month.name)
var1 = df.sf_crime$Category
if(length(levels(var1)) > 20){
topct <- tail(row.names(sort(table(var1))),20)
var1 = factor(var1[var1 %in%  topct],levels=topct)
}
row.names(sort(table(var1))
)
paste(row.names(sort(table(var1))),collapse=',')
if(length(levels(var1)) > 10){
topct <- tail(row.names(sort(table(var1))),10)
var1 = factor(var1[var1 %in%  topct],levels=topct)
}
paste(row.names(sort(table(var1))),collapse=', ')
paste('The proportions for the follow categories are below:', paste(row.names(sort(table(var1))),collapse=', '),'\n',paste(prop.table(sort(table(var1))),collapse=','))
paste('The proportions for the follow categories are below:', paste(row.names(sort(table(var1))),collapse=', '),'\n',paste(round(prop.table(sort(table(var1))),2),collapse=','))
paste('The proportions for the following categories (', paste(row.names(sort(table(var1))),collapse=', '),'):',paste(round(prop.table(sort(table(var1))),2),collapse=','))
paste('The proportions for the following categories (', paste(row.names(sort(table(var1))),collapse=', '),'):',paste(round(prop.table(sort(table(var1))),2),collapse=','),sep='')
paste('The proportions for the following categories (', paste(row.names(sort(table(var1))),collapse=', '),'):',paste(round(prop.table(sort(table(var1))),2),collapse=', '),sep='')
paste('The mean is',mean(var1),'. The standard deviation is',sd(var1) ,sep='')
var1 = df.sf_crime$Time
var1
var1 = df.sf_crime$Times
paste('The mean is',mean(var1),'. The standard deviation is',sd(var1) ,sep='')
paste('The mean is ',round(mean(var1),2),'. The standard deviation is',round(sd(var1),2) ,sep='')
range(var1)
diff(range(var1))
paste('The center is ',round(mean(var1),2),'/',round(median(var1),2),' (mean/median). The spread is ',round(sd(var1),2),'/',round(IQR(var1),2),'/',diff(range(var1)),'(sd/IQR/range).' ,sep='')
paste('The center is ',round(mean(var1),2),'/',round(median(var1),2),' (mean/median). The spread is ',round(sd(var1),2),'/',round(IQR(var1),2),'/',round(diff(range(var1)),2),'(sd/IQR/range).' ,sep='')
paste('The 25th percentile is ',round(quantile(var1,probs=.25),2),'/',round(median(var1),2),' (mean/median). The spread is ',round(sd(var1),2),'/',round(IQR(var1),2),'/',round(diff(range(var1)),2),' (sd/IQR/range).' ,sep='')
paste('The 25th percentile is ',round(quantile(var1,probs=.25),2),'. The 75th percentile is ',round(quantile(var1,probs=.25),2),'.'sep='')
paste('The 25th percentile is ',round(quantile(var1,probs=.25),2),'. The 75th percentile is ',round(quantile(var1,probs=.25),2),'.',sep='')
paste('The 25th percentile is ',round(quantile(var1,probs=.25),2),'. The 75th percentile is ',round(quantile(var1,probs=.75),2),'.',sep='')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
