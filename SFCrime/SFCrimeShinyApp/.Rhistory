m <- knn.reg(matrix(x1,ncol=1), matrix(xtest,ncol=1), y,k=15)
lines(xtest,m$pred,col='blue')
x1 = rnorm(100)
y = x1 + rnorm(100,sd = 4)
xtest = seq(0,30,by=.1)
plot(x1,y)
x1 = rnorm(100,mean = 15)
y = x1 + rnorm(100,sd = 4)
xtest = seq(-2,30,by=.1)
plot(x1,y)
xtest = seq(0,30,by=.1)
plot(x1,y)
m <- knn.reg(matrix(x1,ncol=1), matrix(xtest,ncol=1), y,k=4)
lines(xtest,m$pred)
m <- knn.reg(matrix(x1,ncol=1), matrix(xtest,ncol=1), y,k=10)
lines(xtest,m$pred,col='red')
m <- knn.reg(matrix(x1,ncol=1), matrix(xtest,ncol=1), y,k=15)
lines(xtest,m$pred,col='blue')
x1 = rnorm(100,mean = 15)
y = x1 + rnorm(100,sd = 1)
xtest = seq(0,30,by=.1)
plot(x1,y)
m <- knn.reg(matrix(x1,ncol=1), matrix(xtest,ncol=1), y,k=4)
lines(xtest,m$pred)
m <- knn.reg(matrix(x1,ncol=1), matrix(xtest,ncol=1), y,k=10)
lines(xtest,m$pred,col='red')
m <- knn.reg(matrix(x1,ncol=1), matrix(xtest,ncol=1), y,k=15)
lines(xtest,m$pred,col='blue')
m <- knn.reg(x, xtest, y,k=10)
x1 = 1:10; x2 = 1:10
x = expand.grid(x1,x2)
y = x[,1] + 0.5* x[,2] + rnorm(100,sd = 4)
x1 = seq(1,10,by=.1); x2 = seq(1,10,by=.1)
xtest = expand.grid(x1,x2)
m <- knn.reg(x, xtest, y,k=1)
ps <- persp(x1,x2,matrix(m$pred,length(x1)),col='lightblue',phi = 20,theta=0)
points(trans3d(x[,1], x[,2], y, pmat = ps), col = rgb(0,0,1,alpha=.5), pch = 16)
m <- knn.reg(x, xtest, y, k=10)
ps <- persp(x1,x2,matrix(m$pred,length(x1)),col='lightblue',phi = 20,theta=0)
points(trans3d(x[,1], x[,2], y, pmat = ps), col = rgb(0,0,1,alpha=.5), pch = 16)
m <- knn.reg(x, xtest, y, k=20)
ps <- persp(x1,x2,matrix(m$pred,length(x1)),col='lightblue',phi = 20,theta=0)
points(trans3d(x[,1], x[,2], y, pmat = ps), col = rgb(0,0,1,alpha=.5), pch = 16)
m <- knn.reg(x, xtest, y, k=25)
ps <- persp(x1,x2,matrix(m$pred,length(x1)),col='lightblue',phi = 20,theta=0)
points(trans3d(x[,1], x[,2], y, pmat = ps), col = rgb(0,0,1,alpha=.5), pch = 16)
m <- knn.reg(x, xtest, y,k=1)
ps <- persp(x1,x2,matrix(m$pred,length(x1)),col='lightblue',phi = 20,theta=0)
points(trans3d(x[,1], x[,2], y, pmat = ps), col = rgb(0,0,1,alpha=.5), pch = 16)
x1 = 1:10; x2 = 1:10
x = expand.grid(x1,x2)
y = x[,1] + 0.5* x[,2] + rnorm(100,sd = 2)
x1 = seq(1,10,by=.1); x2 = seq(1,10,by=.1)
xtest = expand.grid(x1,x2)
m <- knn.reg(x, xtest, y,k=1)
ps <- persp(x1,x2,matrix(m$pred,length(x1)),col='lightblue',phi = 20,theta=0)
points(trans3d(x[,1], x[,2], y, pmat = ps), col = rgb(0,0,1,alpha=.5), pch = 16)
m <- knn.reg(x, xtest, y, k=25)
ps <- persp(x1,x2,matrix(m$pred,length(x1)),col='lightblue',phi = 20,theta=0)
points(trans3d(x[,1], x[,2], y, pmat = ps), col = rgb(0,0,1,alpha=.5), pch = 16)
shiny::runApp('Desktop/ShinyApps/MilitarySpending')
shiny::runApp('Desktop/ShinyApps/SFCrime/SFCrimeShinyApp')
14.5/27.50
p = 14.5/27.50
p*2.64
14.5+1.392
6*p
36.14*.53
6.36+6.57+19.15+5.32+18.29+5.87+10.58+6.30+30.70+6.24+10.50
library(dygraphs)
dygraph(nhtemp, main = "New Haven Temperatures") %>%
dyRangeSelector(dateWindow = c("1920-01-01", "1960-01-01"))
install.packages('dygraphs')
library(dygraphs)
dygraph(nhtemp, main = "New Haven Temperatures") %>%
dyRangeSelector(dateWindow = c("1920-01-01", "1960-01-01"))
x = c(8,6,6,7,10,11,7,7,8,6,9,72,26,26,33,39,31,24,24,5,4,14,28,16,63,48,44,36,12,12,120,98,17,10,44,21,9,48,26,21,62,54,26,12,31,11,30)
sum(x)
sum(x)-105
(sum(x)-105)/12
(sum(x)-105)/12/6
y = c(41.5,108,70,72,18,17,80,82,9,18,44,5)
sum(y)
sum(y)/12
sum(y)/12/6
z = c(19,6,80,12,84,73,36,35,68,44,52,55,58,13,17,7)
sum(z)
sum(z)/12
sum(z)/12/6
setwd("~/Desktop/ShinyApps/SFCrime/SFCrimeShinyApp")
library(rgdal)
require(GISTools)
require(fields)
df.sf_crime <- read.csv("SFPD.csv")
source("helper.R")
df.sf_crime$Times <- sapply(strsplit(as.character(df.sf_crime$Time),":"),function(v) { as.numeric(v[1])  + as.numeric(v[2])/60})
df.sf_crime$Dates <- as.Date(df.sf_crime$Date,format="%m/%d/%Y")
topct <- tail(row.names(sort(table(df.sf_crime$Category))),20)
df.sf_crime = df.sf_crime[df.sf_crime$Category %in%  topct,]
df.sf_crime$Category = factor(df.sf_crime$Category)
df_neigh <- spTransform(readOGR(".",'planning_neighborhoods') ,CRS("+proj=longlat +ellps=WGS84"))
df_water <- spTransform(readOGR(".",'phys_waterbodies') ,CRS("+proj=longlat +ellps=WGS84"))
shiny::runApp()
subdat = df.sf_crime
df_neigh_tmp <- df_neigh
sp <- SpatialPoints(subdat[,c('X','Y')],CRS("+proj=longlat +ellps=WGS84"))
sp
head(sp)
head(subdat)
spdf <- SpatialPointsDataFrame(sp,subdat)
df_neigh_tmp$crimes <- table(over(spdf,df_neigh_tmp))
df_neigh_tmp$crimes
brk <- pretty(df_neigh_tmp$crimes,n=10,min.n=0)
n = length(brk)-1 #Number of categories
brk
pal <- colorRampPalette(c('white','DarkBlue'))(n+1)[2:(n+1)]
lvl <- cut(df_neigh_tmp$crimes,brk)
lvl
plot(df_neigh_tmp,col=pal[lvl])
df_neigh_tmp
dim(df_neigh_tmp)
dim(lvl)
length(lvl)
length(df_neigh_temp)
length(df_neigh_tmp)
class(df_neigh)
class(df_neigh_tmp)
lvl <- rep(1,37)
lvl <- rep(1,37); lvl[1] <- n
plot(df_neigh_tmp,col=pal[lvl])
pal
df_neigh_tmp$crimes
pal[lvl]
df_neigh_tmp
names(df_neigh_tmp)
df_neigh_tmp$neighborho
df_neigh_tmp$crimes
df_neigh_tmp$crimes[names(df_neigh_tmp$neighborho)]
df_neigh_tmp$crimes
names(df_neigh_tmp$neighborho)
df_neigh_tmp$neighborho
df_neigh_tmp$crimes[df_neigh_tmp$neighborho]
crimtab <- df_neigh_tmp$crimes[df_neigh_tmp$neighborho]
lvl <- cut(crimtab,brk)
plot(df_neigh_tmp,col=pal[lvl])
shiny::runApp()
data(state.x77)
data(state)
state.x77
head(state.x77)
plot.window(xlim=range(state.center$x),ylim=range(state.center$y))
text(state.center,state.name,cex=0.75)
plot(1:10,1:10,type='n',xlim=range(state.center$x),ylim=range(state.center$y))
text(state.center,state.name,cex=0.75)
plot(1:10,1:10,type='n',xlim=range(state.center$x),ylim=range(state.center$y),xlab='Longitude',ylab='Longitude')
text(state.center,state.name,cex=0.75)
state.density
dat <- state.x77
head(dat)
dat$density <- dat$Population/dat$Area
state.x77
dat <- state.x77
dat$Population/dat$Area
class(dat)
dat <- data.frame(state.x77)
head(dat)
dat$density <- dat$Population/dat$Area
text(dat[,c('Long','Lat')],state.name,cex=0.75)
dat$Long <- state.center$x
dat$Lat <- state.center$y
plot(1:10,1:10,type='n',xlim=range(dat$Long),ylim=range(dat$Lat),xlab='Longitude',ylab='Longitude')
text(dat[,c('Long','Lat')],state.name,cex=0.75)
?factanal
factanal(dat,factors = 1)
factanal(dat,factors = 2)
d <- factanal(dat,factors = k)
k=1
d <- factanal(dat,factors = k)
names(dat)
names(d)
sapply(1:10,function(k) factanal(dat,factors = k)$PVAL)
sapply(1:7,function(k) factanal(dat,factors = k)$PVAL)
sapply(1:6,function(k) factanal(dat,factors = k)$PVAL)
round(sapply(1:6,function(k) factanal(dat,factors = k)$PVAL),2)
factanal(dat,factors = 4)
?factanal
factanal(dat,factors = 4,rotation='promax')
factanal(dat,factors = 4,rotation='quartimax')
factanal(dat,factors = 4,rotation='oblimin')
data(ability.cov)
factanal(factors = 2, covmat = ability.cov, rotation="oblimin")
require(GPArotation)
install.packages('GPArotation')
require(GPArotation)
data(ability.cov)
factanal(factors = 2, covmat = ability.cov, rotation="oblimin")
factanal(dat,factors = 4,rotation='oblimin')
factanal(dat,factors = 4,rotation='quartimax')
factanal(dat,factors = 4,scores='regression')
dat <- cbind(dat,fa$scores)
fa <- factanal(dat,factors = 4,scores='regression')
fa$scores
levelplot(dat[,"Factor1"]~dat[,"Long"]*dat[,"Lat"],
xlab="Longitude",ylab="Latitude")
library(lattice) # For more graphics commands!
levelplot(dat[,"Factor1"]~dat[,"Long"]*dat[,"Lat"],xlab="Longitude",ylab="Latitude")
head(dat)
dat <- cbind(dat,fa$scores)
levelplot(dat[,"Factor1"]~dat[,"Long"]*dat[,"Lat"],xlab="Longitude",ylab="Latitude")
?level
?levelplot
biplot(fa$scores[,1:2],fa$loadgins[,1:2])
biplot(fa$scores[,1:2],fa$loadings[,1:2])
biplot(fa$scores[,1:2],fa$loadings[,1:2],cex=.7)
levelplot(dat[,"Factor1"]~dat[,"Long"]+dat[,"Lat"],xlab="Longitude",ylab="Latitude")
dat[,"Lat"]
levelplot(dat[,"Factor2"]~dat[,"Long"]+dat[,"Lat"],xlab="Longitude",ylab="Latitude")
levelplot(dat[,"Factor3"]~dat[,"Long"]+dat[,"Lat"],xlab="Longitude",ylab="Latitude")
levelplot(dat[,"Factor4"]~dat[,"Long"]+dat[,"Lat"],xlab="Longitude",ylab="Latitude")
biplot(fa$scores[,2:3],fa$loadings[,2:3],cex=.7)
biplot(fa$scores[,c(1,3)],fa$loadings[,c(1,3)],cex=.7)
names(fa)
fa$loadings
names(fa$loadings)
class(fa$loadings)
?loadings
loadings(fa$loadings)
loadings(fa)
fa$loadings^2
fa$loadings[,1]
fa$loadings[,1]^2
sum(fa$loadings[,1]^2)
colSum(fa$loadings^2)
colSums(fa$loadings^2)
sum(fa$loadings^2)
sum(fa$loadings^2)/11
round(sapply(1:6,function(k) sum(factanal(dat,factors = k)$loadings^2)/11),2) #p-values for k=1,...,6
k=1
sum(factanal(dat,factors = k)$loadings^2)/11
factanal(dat,factors = k)$loadings
factanal(dat,factors = k)
dat
dat <- data.frame(state.x77)
dat$density <- dat$Population/dat$Area
dat$Long <- state.center$x
dat$Lat <- state.center$y
round(sapply(1:6,function(k) sum(factanal(dat,factors = k)$loadings^2)/11),2) #p-values for k=1,...,6
plot(1:6,round(sapply(1:6,function(k) sum(factanal(dat,factors = k)$loadings^2)/11),2)) #proportion of variation
plot(1:6,round(sapply(1:6,function(k) sum(factanal(dat,factors = k)$loadings^2)/11),2),type='b') #proportion of variation explained
plot(1:6,round(sapply(1:6,function(k) sum(factanal(dat,factors = k)$loadings^2)/11),2),type='b',ylab='Propotion of Variation Explained') #proportion of variation explained
plot(1:6,round(sapply(1:6,function(k) sum(factanal(dat,factors = k)$loadings^2)/11),2),type='b',ylab='Propotion of Variation Explained',xlab='k') #proportion of variation explained
pca <- princomp(dat)
pca
biplot(pca)
pca2 <- princomp(scale(dat))
biplot(pca2)
warnings()
pca2 <- princomp(dat,scale=TRUE)
biplot(pca2)
pca2 <- princomp(dat,.scale=TRUE)
biplot(pca2)
?princomp
pca2 <- princomp(scale(dat))
warnings()
pca2 <- princomp(scale(dat))
biplot(pca2)
plot(pca2)
pca <- prcomp(dat)
biplot(pca)
pca2 <- prcomp(dat,scale=TRUE)
plot(pca2)
biplot(pca2)
plot(pca)
pca2 <- prcomp(dat,scale=TRUE)
biplot(pca2)
biplot(pca2,cex=.7)
head(state.x77)
dat <- data.frame(state.x77)
dat$density <- dat$Population/dat$Area
datfull <- dat
datfull$Long <- state.center$x
datfull$Lat <- state.center$y
plot(1:10,1:10,type='n',xlim=range(datfull$Long),ylim=range(datfull$Lat),xlab='Longitude',ylab='Longitude')
text(datfull[,c('Long','Lat')],state.name,cex=0.75)
factanal(dat,factors = 1)
factanal(dat,factors = 2)
plot(1:6,round(sapply(1:6,function(k) sum(factanal(dat,factors = k)$loadings^2)/11),2),type='b',ylab='Propotion of Variation Explained',xlab='k')
plot(1:6,round(sapply(1:5,function(k) sum(factanal(dat,factors = k)$loadings^2)/11),2),type='b',ylab='Propotion of Variation Explained',xlab='k')
plot(1:5,round(sapply(1:5,function(k) sum(factanal(dat,factors = k)$loadings^2)/11),2),type='b',ylab='Propotion of Variation Explained',xlab='k')
round(sapply(1:5,function(k) factanal(dat,factors = k)$PVAL),2) #p-values for k=1,...,6
factanal(dat,factors = 5)
factanal(dat,factors = 5,rotation='promax')
factanal(dat,factors = 5,rotation='oblimin')
factanal(dat,factors = 5,rotation='quartimax')
fa <- factanal(dat,factors = 5,scores='regression')
dat <- cbind(dat,fa$scores)
biplot(fa$scores[,1:2],fa$loadings[,1:2],cex=.7)
biplot(fa$scores[,c(1,3)],fa$loadings[,c(1,3)],cex=.7)
biplot(fa$scores[,2:3],fa$loadings[,2:3],cex=.7)
library(lattice) # For more graphics commands!
levelplot(dat[,"Factor1"]~dat[,"Long"]+dat[,"Lat"],xlab="Longitude",ylab="Latitude")
datfull <- cbind(datfull,fa$scores)
biplot(fa$scores[,1:2],fa$loadings[,1:2],cex=.7)
biplot(fa$scores[,c(1,3)],fa$loadings[,c(1,3)],cex=.7)
biplot(fa$scores[,2:3],fa$loadings[,2:3],cex=.7)
library(lattice) # For more graphics commands!
levelplot(datfull[,"Factor1"]~datfull[,"Long"]+datfull[,"Lat"],xlab="Longitude",ylab="Latitude")
levelplot(datfull[,"Factor2"]~datfull[,"Long"]+datfull[,"Lat"],xlab="Longitude",ylab="Latitude")
levelplot(datfull[,"Factor3"]~datfull[,"Long"]+datfull[,"Lat"],xlab="Longitude",ylab="Latitude")
levelplot(datfull[,"Factor4"]~datfull[,"Long"]+datfull[,"Lat"],xlab="Longitude",ylab="Latitude")
```
pca <- prcomp(dat)
plot(pca)
biplot(pca,cex=.7)
pca2 <- prcomp(dat,scale=TRUE)
plot(pca2)
biplot(pca2,cex=.7)
dat <- data.frame(state.x77)
dat$density <- dat$Population/dat$Area
pca2 <- prcomp(dat,scale=TRUE)
plot(pca2)
biplot(pca2,cex=.7)
?glm
1.2^@
1.2^2
1.2^2*2.9
9^2*3*4
plot(x1,x2)
x1 <- runif(100)
x2 <- runif(100)
plot(x1,x2)
x1 <- runif(500)
x2 <- runif(500)
plot(x1,x2)
1+0.1*x1^2-x1^3
plot(x1,1+0.1*x1^2-x1^3)
plot(x1,1+0.1*x1^2-x1^4)
plot(x1,1-0.1*x1^2-x1^4)
plot(x1,1-0.1*x1^2+x1^4)
plot(x1,1-0.1*x1^2-x1^4)
x1 <- runif(500)
x2 <- runif(500)
y <- rep(1,500)
y[x2< 1+0.1*x1^2-x1^4] <- 2
plot(x1,x2,col = y)
x1 <- runif(500)
x2 <- runif(500)
y <- rep(1,500)
y[x2< 1+0.1*(x1-.5)^2-x1^4] <- 2
plot(x1,x2,col = y)
x1 <- runif(500)
x2 <- runif(500)
y <- rep(1,500)
y[x2< 1+0.1*(x1-.5)^2] <- 2
plot(x1,x2,col = y)
plot(x1,1+0.1*(x1-.5)^2)
y[x2< 1-0.1*(x1-.5)^2] <- 2
plot(x1,x2,col = y)
y[x2< 1-0.1*(x1-.5)^2] <- 2
plot(x1,1-0.1*(x1-.5)^2)
y[x2< 1-(x1-.5)^2] <- 2
plot(x1,x2,col = y)
x1 <- runif(500)
x2 <- runif(500)
y <- rep(1,500)
y[x2< 1-(x1-.5)^2] <- 2
plot(x1,x2,col = y)
y[x2< 1-3*(x1-.5)^2] <- 2
y <- rep(1,500)
y[x2< 1-3*(x1-.5)^2] <- 2
plot(x1,x2,col = y)
y[x2< 1-4*(x1-.5)^2] <- 2
y <- rep(1,500)
y[x2< 1-4*(x1-.5)^2] <- 2
plot(x1,x2,col = y)
y[x2< 1-4*(x1-.8)^2] <- 2
x1 <- runif(500)
x2 <- runif(500)
y <- rep(1,500)
y[x2< 1-4*(x1-.8)^2] <- 2
plot(x1,x2,col = y)
x1 <- runif(500)
x2 <- runif(500)
y <- rep(1,500)
y[x2< 1-4*(x1-.6)^2] <- 2
plot(x1,x2,col = y)
x1 <- c(rnorm(500),rnorm(500,2))
x2 <- c(rnorm(500,1),rnorm(500,3))
y <- rep(1,500)
y[x2< 1-4*(x1-.6)^2] <- 2 #add variability in here
plot(x1,x2,col = y)
x1 <- c(rnorm(500),rnorm(500,2))
x2 <- c(rnorm(500,1),rnorm(500,3))
y <- c(rep(1,500),rep(2,500))
plot(x1,x2,col = y)
x <- c(rnorm(500),rnorm(500,2))
y <- c(rep(1,500),rep(2,500))
plot(x,x2,col = y)
hist(x,col = y)
hist(x[1:500],col = 1)
hist(x[-(1:500)],col = 2,add=TRUE)
hist(x[1:500],col = 1,xlim=c(-5,5))
hist(x[-(1:500)],col = 2,add=TRUE)
hist(x[1:500],col = rgb(1,0,0,.3),xlim=c(-5,5))
hist(x[-(1:500)],col = rgb(0,0,1,.3),add=TRUE)
hist(x[1:500],col = rgb(1,0,0,.3),xlim=c(-5,5),main='')
hist(x[-(1:500)],col = rgb(0,0,1,.3),add=TRUE)
hist(x[1:500],col = rgb(1,0,0,.3),xlim=c(-5,5),main='',xlab='x')
hist(x[-(1:500)],col = rgb(0,0,1,.3),add=TRUE)
require(mosaic)
mean(x~y)
sd(x~y)
(500-1)*sd(x~y)
sum((500-1)*sd(x~y))/(1000 - 2)
lda_sd = sum((500-1)*sd(x~y))/(1000 - 2)
lda_ms = mean(x~y)
prop.table(table(x,y))
table(x,y)
lda_pis = prop.table(table(y))
prop.table(table(y))
lda_pis = prop.table(table(y))
d1 = function(x) x*lda_ms[1]/lda_sd^2 - lda_ms[1]^2/(2*lda_sd^2) + log(lda_pis[1])
d2 = function(x) x*lda_ms[2]/lda_sd^2 - lda_ms[2]^2/(2*lda_sd^2) + log(lda_pis[2])
plot(seq(-4,4,by=.1),d1(seq(-4,4,by=.1)))
lines(seq(-4,4,by=.1),d2(seq(-4,4,by=.1)))
plot(seq(-4,4,by=.1),d1(seq(-4,4,by=.1)),type='l')
plot(seq(-4,4,by=.1),d1(seq(-4,4,by=.1)),type='l',ylim=c(-1,1))
lines(seq(-4,4,by=.1),d2(seq(-4,4,by=.1)))
abline(v=mean(lda_ms))
abline(v=mean(lda_ms),lty=2)
lda_sd = sum((500-1)*sd(x~y))/(1000 - 2)
lda_ms = mean(x~y)
lda_pis = prop.table(table(y))
d1 = function(x) x*lda_ms[1]/lda_sd^2 - lda_ms[1]^2/(2*lda_sd^2) + log(lda_pis[1])
d2 = function(x) x*lda_ms[2]/lda_sd^2 - lda_ms[2]^2/(2*lda_sd^2) + log(lda_pis[2])
plot(seq(-4,4,by=.1),d1(seq(-4,4,by=.1)),type='l',ylim=c(-1,1))
lines(seq(-4,4,by=.1),d2(seq(-4,4,by=.1)))
abline(v=mean(lda_ms),lty=2)
plot(seq(-4,4,by=.1),d1(seq(-4,4,by=.1)),type='l',ylim=c(-1,1),ylab='Delta function',xlab='x')
lines(seq(-4,4,by=.1),d2(seq(-4,4,by=.1)))
abline(v=mean(lda_ms),lty=2)
plot(seq(-4,4,by=.1),d1(seq(-4,4,by=.1)),type='l',ylim=c(-10,10),ylab='Delta function',xlab='x')
lines(seq(-4,4,by=.1),d2(seq(-4,4,by=.1)))
abline(v=mean(lda_ms),lty=2)
hist(x[1:500],col = rgb(1,0,0,.3),xlim=c(-5,5),main='',xlab='x')
hist(x[-(1:500)],col = rgb(0,0,1,.3),add=TRUE)
abline(v=mean(lda_ms),lty=2)
abline(v=mean(lda_ms),lty=2,lwd=2)
abline(v=mean(lda_ms),lty=2,lwd=4)
x1 <- c(rnorm(500),rnorm(500,2))
x2 <- c(rnorm(500,1),rnorm(500,3))
y <- c(rep(1,500),rep(2,500))
plot(x1,x2,col = y)
plot(x1,x2,col = y,pch=19)
lda_ms = mean(x1~y)
mean(x1~y)
lda_ms1 = mean(x1[y==1])
lda_ms2 = mean(x2[y==1])
lda_ms1 = c(mean(x1[y==1]),mean(x2[y==1]))
lda_ms2 = c(mean(x1[y==2]),mean(x2[y==2]))
ifelse(y==1,lda_ms1[1],lda_ms1[2])
x1s = x1 - ifelse(y==1,lda_ms1[1],lda_ms2[1])
x2s = x2 - ifelse(y==1,lda_ms1[2],lda_ms2[2])
lda_sigma = cov(x1s,x2s)
cov
cov(x1s,x2s)
cov(cbind(x1s,x2s))
(1000-1)/(1000-2) * cov(cbind(x1s,x2s))
lda_sigma = (1000-1)/(1000-2) * cov(cbind(x1s,x2s))
lda_pis = prop.table(table(y))
require(MASS)
?lda
lda(y~x1+x2)
lda.fit <- lda(y~x1+x2)
plot(lda.fit)
plot(lda.fit)
plot(x1,x2,col = y,pch=19)
names(lda.fit)
plot(lda.fit)
x = plot(lda.fit)
x
lda.fit <- lda(y~x1+x2)
plot(x1,x2,col = y,pch=19)
plot(x1,x2,pch=19)
predict(lda.fit)
predict(lda.fit)$class
predict(lda.fit)$class != y
plot(x1,x2,col = predict(lda.fit)$class != y)
points(x1[predict(lda.fit)$class != y & y == 1],x2[predict(lda.fit)$class != y & y == 1],col = 2)
plot(x1,x2,pch=19)
points(x1[predict(lda.fit)$class != y & y == 1],x2[predict(lda.fit)$class != y & y == 1],col = 2)
points(x1[predict(lda.fit)$class != y & y == 2],x2[predict(lda.fit)$class != y & y == 2],col = 3)
lda.fit
abline(a = 0 ,b = 0.7069/0.7196)
abline(a = 0 ,b = -0.7069/0.7196)
abline(a = 10 ,b = -0.7069/0.7196)
abline(a = 5 ,b = -0.7069/0.7196)
abline(a = 3 ,b = -0.7069/0.7196)
abline(a = 2.5 ,b = -0.7069/0.7196)
abline(a = 2.7 ,b = -0.7069/0.7196)
plot(x1,x2,pch=19)
abline(a = 2.7 ,b = -0.7069/0.7196)
points(x1[predict(lda.fit)$class != y & y == 1],x2[predict(lda.fit)$class != y & y == 1],col = 2)
points(x1[predict(lda.fit)$class != y & y == 2],x2[predict(lda.fit)$class != y & y == 2],col = 3)
abline(a = 2.8 ,b = -0.7069/0.7196)
points(x1[predict(lda.fit)$class != y & y == 1],x2[predict(lda.fit)$class != y & y == 1],col = 2)
points(x1[predict(lda.fit)$class != y & y == 2],x2[predict(lda.fit)$class != y & y == 2],col = 3)
lda.fit <- lda(y~x1+x2)
plot(x1,x2,pch=19)
abline(a = 2.8 ,b = -0.7069/0.7196)
points(x1[predict(lda.fit)$class != y & y == 1],x2[predict(lda.fit)$class != y & y == 1],col = 2)
points(x1[predict(lda.fit)$class != y & y == 2],x2[predict(lda.fit)$class != y & y == 2],col = 3)
